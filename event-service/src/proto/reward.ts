// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v4.25.3
// source: src/proto/reward.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "@grpc/grpc-js";

export const protobufPackage = "reward";

export interface Reward {
  id: string;
  /** FK: 이벤트 ID */
  eventId: string;
  /** 보상 제목 */
  title: string;
  /** 보상 설명 */
  description: string;
  /** 필요한 출석 횟수 */
  requiredAttendance: number;
  /** 보상 유형 (예: POINT, ITEM, BADGE 등) */
  rewardType: string;
  /** 보상 값 (포인트 수량, 아이템 ID 등) */
  rewardValue: string;
  /** 보상 활성화 상태 */
  isActive: boolean;
  /** 생성 일시 */
  createdAt: string;
  /** 수정 일시 */
  updatedAt: string;
}

export interface CreateRewardRequest {
  eventId: string;
  title: string;
  description: string;
  requiredAttendance: number;
  rewardType: string;
  rewardValue: string;
  isActive: boolean;
}

export interface CreateRewardResponse {
  success: boolean;
  message: string;
  reward: Reward | undefined;
}

export interface GetEventRewardsRequest {
  eventId: string;
}

export interface GetEventRewardsResponse {
  success: boolean;
  message: string;
  rewards: Reward[];
}

export interface UserRewardStatus {
  userId: string;
  eventId: string;
  rewardId: string;
  /** 현재 출석 횟수 */
  currentAttendance: number;
  /** 보상 수령 가능 여부 */
  isEligible: boolean;
  /** 보상 수령 여부 */
  isClaimed: boolean;
  /** 보상 수령 일시 */
  claimedAt: string;
}

export interface GetUserRewardStatusRequest {
  userId: string;
  eventId: string;
}

export interface GetUserRewardStatusResponse {
  success: boolean;
  message: string;
  statuses: UserRewardStatus[];
}

export interface RequestRewardRequest {
  userId: string;
  eventId: string;
  rewardId: string;
}

export interface RequestRewardResponse {
  success: boolean;
  message: string;
  status: UserRewardStatus | undefined;
}

function createBaseReward(): Reward {
  return {
    id: "",
    eventId: "",
    title: "",
    description: "",
    requiredAttendance: 0,
    rewardType: "",
    rewardValue: "",
    isActive: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const Reward: MessageFns<Reward> = {
  encode(message: Reward, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.requiredAttendance !== 0) {
      writer.uint32(40).int32(message.requiredAttendance);
    }
    if (message.rewardType !== "") {
      writer.uint32(50).string(message.rewardType);
    }
    if (message.rewardValue !== "") {
      writer.uint32(58).string(message.rewardValue);
    }
    if (message.isActive !== false) {
      writer.uint32(64).bool(message.isActive);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(82).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reward {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.requiredAttendance = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rewardType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rewardValue = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<Reward>, I>>(base?: I): Reward {
    return Reward.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reward>, I>>(object: I): Reward {
    const message = createBaseReward();
    message.id = object.id ?? "";
    message.eventId = object.eventId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.requiredAttendance = object.requiredAttendance ?? 0;
    message.rewardType = object.rewardType ?? "";
    message.rewardValue = object.rewardValue ?? "";
    message.isActive = object.isActive ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseCreateRewardRequest(): CreateRewardRequest {
  return {
    eventId: "",
    title: "",
    description: "",
    requiredAttendance: 0,
    rewardType: "",
    rewardValue: "",
    isActive: false,
  };
}

export const CreateRewardRequest: MessageFns<CreateRewardRequest> = {
  encode(message: CreateRewardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.requiredAttendance !== 0) {
      writer.uint32(32).int32(message.requiredAttendance);
    }
    if (message.rewardType !== "") {
      writer.uint32(42).string(message.rewardType);
    }
    if (message.rewardValue !== "") {
      writer.uint32(50).string(message.rewardValue);
    }
    if (message.isActive !== false) {
      writer.uint32(56).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRewardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRewardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.requiredAttendance = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rewardType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rewardValue = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CreateRewardRequest>, I>>(base?: I): CreateRewardRequest {
    return CreateRewardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRewardRequest>, I>>(object: I): CreateRewardRequest {
    const message = createBaseCreateRewardRequest();
    message.eventId = object.eventId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.requiredAttendance = object.requiredAttendance ?? 0;
    message.rewardType = object.rewardType ?? "";
    message.rewardValue = object.rewardValue ?? "";
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateRewardResponse(): CreateRewardResponse {
  return { success: false, message: "", reward: undefined };
}

export const CreateRewardResponse: MessageFns<CreateRewardResponse> = {
  encode(message: CreateRewardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.reward !== undefined) {
      Reward.encode(message.reward, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRewardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRewardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reward = Reward.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CreateRewardResponse>, I>>(base?: I): CreateRewardResponse {
    return CreateRewardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRewardResponse>, I>>(object: I): CreateRewardResponse {
    const message = createBaseCreateRewardResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.reward = (object.reward !== undefined && object.reward !== null)
      ? Reward.fromPartial(object.reward)
      : undefined;
    return message;
  },
};

function createBaseGetEventRewardsRequest(): GetEventRewardsRequest {
  return { eventId: "" };
}

export const GetEventRewardsRequest: MessageFns<GetEventRewardsRequest> = {
  encode(message: GetEventRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GetEventRewardsRequest>, I>>(base?: I): GetEventRewardsRequest {
    return GetEventRewardsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventRewardsRequest>, I>>(object: I): GetEventRewardsRequest {
    const message = createBaseGetEventRewardsRequest();
    message.eventId = object.eventId ?? "";
    return message;
  },
};

function createBaseGetEventRewardsResponse(): GetEventRewardsResponse {
  return { success: false, message: "", rewards: [] };
}

export const GetEventRewardsResponse: MessageFns<GetEventRewardsResponse> = {
  encode(message: GetEventRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    for (const v of message.rewards) {
      Reward.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewards.push(Reward.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GetEventRewardsResponse>, I>>(base?: I): GetEventRewardsResponse {
    return GetEventRewardsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventRewardsResponse>, I>>(object: I): GetEventRewardsResponse {
    const message = createBaseGetEventRewardsResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.rewards = object.rewards?.map((e) => Reward.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserRewardStatus(): UserRewardStatus {
  return {
    userId: "",
    eventId: "",
    rewardId: "",
    currentAttendance: 0,
    isEligible: false,
    isClaimed: false,
    claimedAt: "",
  };
}

export const UserRewardStatus: MessageFns<UserRewardStatus> = {
  encode(message: UserRewardStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.rewardId !== "") {
      writer.uint32(26).string(message.rewardId);
    }
    if (message.currentAttendance !== 0) {
      writer.uint32(32).int32(message.currentAttendance);
    }
    if (message.isEligible !== false) {
      writer.uint32(40).bool(message.isEligible);
    }
    if (message.isClaimed !== false) {
      writer.uint32(48).bool(message.isClaimed);
    }
    if (message.claimedAt !== "") {
      writer.uint32(58).string(message.claimedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserRewardStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRewardStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewardId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentAttendance = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isEligible = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isClaimed = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.claimedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UserRewardStatus>, I>>(base?: I): UserRewardStatus {
    return UserRewardStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRewardStatus>, I>>(object: I): UserRewardStatus {
    const message = createBaseUserRewardStatus();
    message.userId = object.userId ?? "";
    message.eventId = object.eventId ?? "";
    message.rewardId = object.rewardId ?? "";
    message.currentAttendance = object.currentAttendance ?? 0;
    message.isEligible = object.isEligible ?? false;
    message.isClaimed = object.isClaimed ?? false;
    message.claimedAt = object.claimedAt ?? "";
    return message;
  },
};

function createBaseGetUserRewardStatusRequest(): GetUserRewardStatusRequest {
  return { userId: "", eventId: "" };
}

export const GetUserRewardStatusRequest: MessageFns<GetUserRewardStatusRequest> = {
  encode(message: GetUserRewardStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRewardStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRewardStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GetUserRewardStatusRequest>, I>>(base?: I): GetUserRewardStatusRequest {
    return GetUserRewardStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRewardStatusRequest>, I>>(object: I): GetUserRewardStatusRequest {
    const message = createBaseGetUserRewardStatusRequest();
    message.userId = object.userId ?? "";
    message.eventId = object.eventId ?? "";
    return message;
  },
};

function createBaseGetUserRewardStatusResponse(): GetUserRewardStatusResponse {
  return { success: false, message: "", statuses: [] };
}

export const GetUserRewardStatusResponse: MessageFns<GetUserRewardStatusResponse> = {
  encode(message: GetUserRewardStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    for (const v of message.statuses) {
      UserRewardStatus.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRewardStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRewardStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.statuses.push(UserRewardStatus.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GetUserRewardStatusResponse>, I>>(base?: I): GetUserRewardStatusResponse {
    return GetUserRewardStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRewardStatusResponse>, I>>(object: I): GetUserRewardStatusResponse {
    const message = createBaseGetUserRewardStatusResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.statuses = object.statuses?.map((e) => UserRewardStatus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRequestRewardRequest(): RequestRewardRequest {
  return { userId: "", eventId: "", rewardId: "" };
}

export const RequestRewardRequest: MessageFns<RequestRewardRequest> = {
  encode(message: RequestRewardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.rewardId !== "") {
      writer.uint32(26).string(message.rewardId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestRewardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestRewardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewardId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<RequestRewardRequest>, I>>(base?: I): RequestRewardRequest {
    return RequestRewardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestRewardRequest>, I>>(object: I): RequestRewardRequest {
    const message = createBaseRequestRewardRequest();
    message.userId = object.userId ?? "";
    message.eventId = object.eventId ?? "";
    message.rewardId = object.rewardId ?? "";
    return message;
  },
};

function createBaseRequestRewardResponse(): RequestRewardResponse {
  return { success: false, message: "", status: undefined };
}

export const RequestRewardResponse: MessageFns<RequestRewardResponse> = {
  encode(message: RequestRewardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.status !== undefined) {
      UserRewardStatus.encode(message.status, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestRewardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestRewardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = UserRewardStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<RequestRewardResponse>, I>>(base?: I): RequestRewardResponse {
    return RequestRewardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestRewardResponse>, I>>(object: I): RequestRewardResponse {
    const message = createBaseRequestRewardResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? UserRewardStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

export interface RewardService {
  CreateReward(request: CreateRewardRequest, metadata?: Metadata): Promise<CreateRewardResponse>;
  GetEventRewards(request: GetEventRewardsRequest, metadata?: Metadata): Promise<GetEventRewardsResponse>;
  GetUserRewardStatus(request: GetUserRewardStatusRequest, metadata?: Metadata): Promise<GetUserRewardStatusResponse>;
  RequestReward(request: RequestRewardRequest, metadata?: Metadata): Promise<RequestRewardResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
